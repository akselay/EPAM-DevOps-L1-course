AWS IAM:

Add user (IAM - Users - Add)

Attach policies directly - AdministratorAccess

User - Security Credentials - Access keys - add new - download

Terraform:

Install terraform on host machine

Create aws_instances.tf

provider "aws" {
  access_key = "paste"
  secret_key = "paste"
  region = "eu-central-1"
}

resource "aws_instance" "ansible" {
  ami = "ami-06616b7884ac98cdd"
  instance_type = "t2.micro"
  key_name = "general"
  associate_public_ip_address = true
  tags = {
    Name = "ansible"
  }
}

resource "aws_instance" "jenkins" {
  ami = "ami-06616b7884ac98cdd"
  instance_type = "t2.micro"
  key_name = "general"
  associate_public_ip_address = true
  tags = {
    Name = "jenkins"
  }
}

resource "aws_instance" "webserver" {
  ami = "ami-06616b7884ac98cdd"
  instance_type = "t2.micro"
  key_name = "general"
  associate_public_ip_address = true
  tags = {
    Name = "webserver"
  }
}

(for webserver) Allow http traffic from the internet (open port 80)

On Ansible:

sudo yum -y update

sudo amazon-linux-extras install -y ansible2 

ansible --version

cd .ssh

Copy private key in .ssh catalog

sudo chmod 400 general.pem

cd ..

nano hosts.txt

Paste jenkins and webserver public ip addresses

[docker]
jenkins  ansible_host=18.157.79.100 ansible_user=ec2-user  ansible_ssh_private_key_file=/home/ec2-user/.ssh/general.pem
webserver  ansible_host=3.67.36.72 ansible_user=ec2-user  ansible_ssh_private_key_file=/home/ec2-user/.ssh/general.pem

nano ansible.cfg

[defaults]
host_key_checking = False
inventory          = ./hosts.txt

ansible -i hosts.txt all -m ping

nano docker-install.yml

---
- name: "AWS - Install docker"
  hosts: all
  become: yes
  tasks:
    - name: Update all packages
      yum:
        name: '*'
        state: latest
        update_only: yes

    - name: Ensure a list of yum packages are installed
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - python-pip
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - amazon-linux-extras

    - name: Add extras repository
      shell: yum-config-manager --enable extras

    - name: Enable Some packages from amazon-linux-extras packages
      shell: "amazon-linux-extras enable python3.8 ansible2 docker"

    - name: clean yum metadata cache
      command: yum clean metadata
      args:
        warn: false

    - name: Ensure a list of yum packages are installed
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - python3.8
        - ansible
        - docker

    - name: Enable Docker CE service at startup
      service:
        name: docker
        state: started
        enabled: yes

    - name: Upgrade pip3
      shell: "python3.8 -m pip install pip --upgrade"

    - name: Ensure Python pip packages are installed
      pip:
        name: "{{ packages }}"
        executable: /usr/local/bin/pip3.8
      vars:
        packages:
        - boto
        - boto3
        - docker-compose

ansible-playbook docker-install.yml -l docker

Connect and configure Jenkins:

sudo usermod -aG docker $USER

Make relogin

docker run -p 8080:8080 -p 50000:50000 -d -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

docker ps

Copy container id

docker logs (container id) daabb4f303b5

Copy admin password c32b7bf5ccde4cfcba04185c4767b3b8

Open port 8080 on EC2 traffic inbound rules

Open Jenkins public ip (port 8080) and make intial config with admin password.

Install publish over ssh plugin

Manafe Jenkins - System configuration - Publish over SSH - add Webserver credentials (public ip, username and private key)

Switch to Webserver and make base config:

sudo usermod -aG docker $USER

Make relogin

sudo yum -y install git

mkdir docker

cd docker

nano Dockerfile

FROM amazonlinux

RUN yum -y update
RUN yum -y install httpd

RUN echo 'Test message' > /var/www/html/index.html
CMD ["/usr/sbin/httpd","-D","FOREGROUND"]

EXPOSE 80

docker build -t webserv:v1 .

docker run -d -p 80:80 webserv:v1

docker ps

Copy container id for Jenkins 9c3f4998695d

Switch to Jenkins and create a simple job with parameters:

checkbox [v] GitHub project

Project url
https://github.com/akselay/testweb.git/

Manage source code
Git
Repository URL
https://github.com/akselay/testweb.git

Branch Specifier
main

checkbox [v] GitHub hook trigger for GITScm polling

Add build step for remote Webserver (send files or execute commands over ssh):

Exec command (paste webserv:v1 container id)

sudo rm -rf /var/www/*
sudo rm -rf /var/www/html/.git
sudo git clone https://github.com/akselay/testweb.git /var/www/html/
docker exec 9c3f4998695d rm -rf /var/www/*
docker cp /var/www/html/. 9c3f4998695d:/var/www/html/

Add webhook on GitHub repository settings:

http://jenkins_ip:8080/github-webhook/

(application/json)

Open Webserver public ip and check "Test message"

Run Jenkins job, refresh webpage, see result

Open any GitHub client, make changes to the website, in main.css add (for example): 

-moz-animation: bg 60s linear infinite;
-webkit-animation: bg 60s linear infinite;
-ms-animation: bg 60s linear infinite;
animation: bg 60s linear infinite;

Edit index.html

Make push (GitKraken)

View changes

------------
after reboot
------------

MobaXterm - edit connections - Public IPv4 DNS (Jenkins, Webserver)

On Jenkins:
docker start daabb4f303b5

Open Jenkins webpage
pass c32b7bf5ccde4cfcba04185c4767b3b8

Change & test Webserver IP on Jenkins - Manage configuration

On Webserver:
docker start 9c3f4998695d

On GitHub - update Jenkins IP
https://github.com/akselay/testweb/settings/hooks/399843087